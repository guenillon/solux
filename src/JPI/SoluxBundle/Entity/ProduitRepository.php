<?php

namespace JPI\SoluxBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
	public function getProduit($id)
	{
		$lQuery = $this
		->createQueryBuilder('a')
		->where('a.id = :id')
		->setParameter('id', $id)
		->leftJoin('a.limites', 'limites')
		->addSelect('limites')
		->join('a.categorie', 'categorie')
		->addSelect('categorie')
		->orderBy('limites.nbMembreMin', 'ASC');
		
		return $lQuery
		->getQuery()
		->getResult()
		;
	}
	
	public function getProduits($id)
	{
		$lQuery = $this
		->createQueryBuilder('a')
		->where('a.id in (:id)')
		->setParameter('id', $id)
		->leftJoin('a.limites', 'limites')
		->addSelect('limites')
		->join('a.categorie', 'categorie')
		->addSelect('categorie')
		->orderBy('limites.nbMembreMin', 'ASC');
	
		return $lQuery
		->getQuery()
		->getResult()
		;
	}
	
	public function findProduitByParametres(Produit $produit, $nbMembre)
	{
		$query = $this->createQueryBuilder('a');
			
		// Si la recherche porte sur le codeBarre	
		if($produit->getCodeBarre() != '')
		{
			$query->andWhere('a.codeBarre = :codeBarre')
			->setParameter('codeBarre', $produit->getCodeBarre());
		}
	
		// Si la recherche porte sur le nom	
		if($produit->getNom() != '')
		{
			$query->andWhere('a.nom = :nom')
			->setParameter('nom', $produit->getNom());
		}
		
		$query->leftJoin('a.limites', 'limites', 'WITH', ':nbMembres >= limites.nbMembreMin AND :nbMembres <= limites.nbMembreMax ' )
			->addSelect('limites')
			->setParameter('nbMembres', $nbMembre)
			->join('a.categorie', 'categorie')
			->addSelect('categorie');
	
		return $query->getQuery()->getResult();
	}
}
?>
